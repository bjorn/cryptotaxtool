import { ListView } from "std-widgets.slint";

export enum UiTransactionType {
    buy,
    sell,
    trade,
    deposit,
    withdrawal,
    fee,
    receive,
    send,
    transfer,
    chain-split,
    expense,
    income,
    airdrop,
    spam,
}

export struct UiTransaction {
    from: string,
    to: string,
    date: string,
    time: string,
    tx_type: UiTransactionType,
    received: string,
    sent: string,
    fee: string,
    value: string,
    gain: float,
    gain_error: string,
    description: string,
    tx_hash: string,
}

component Cell inherits HorizontalLayout {
    horizontal-stretch: 1;
    preferred-width: 0;
    min-width: 0;
    spacing: 5px;
}

component ElidingText inherits Text {
    overflow: elide;
    vertical-alignment: center;
}

component TextCell inherits ElidingText {
    horizontal-stretch: 1;
    preferred-width: 0;
    min-width: 0;
}

component SmallButton inherits Rectangle {
    in property text <=> i-text.text;
    in property tooltip <=> i-tooltip.text;
    out property <bool> has-hover: i-touch.has-hover;

    callback clicked;

    border-radius: 2px;
    background: i-touch.has-hover ? #5e5e5e : #2e2e2e;
    preferred-width: i-text.preferred-width + 5px;
    min-width: self.height;
    height: i-text.preferred-height + 5px;

    i-text := Text {
        vertical-alignment: center;
    }
    i-touch := TouchArea {
        clicked => { root.clicked() }
        mouse-cursor: pointer;
    }

    Rectangle {
        background: #000000;
        border-radius: 2px;
        opacity: root.has-hover ? 1.0 : 0;
        width: i-tooltip.preferred-width + 8px;
        height: i-tooltip.preferred-height + 4px;
        x: -(root.has-hover ? 5px : 0) - self.width;
        y: (root.height - self.height) / 2;

        animate opacity, x {
            duration: 100ms;
        }

        i-tooltip := Text {}
    }
}

component TransactionDisplay inherits Rectangle {
    callback open-transaction(string);

    in property <UiTransaction> tx : {
        from: "Exchange Foo",
        to: "Wallet Bar",
        date: "2013-11-01",
        time: "12:34:56",
        tx_type: UiTransactionType.buy,
        received: "1 BTC",
        sent: "300 €",
        fee: "1 €",
        value: "300 €",
        gain: 0.0,
        gain_error: "",
        description: "Foo bar baz",
        tx_hash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    };

    in property <bool> even;

    background: {
        if (touch.has-hover || tx-btn.has-hover || desc-btn.has-hover) {
            return #4564;
        }
        if (even) {
            return #ffffff06;
        }
        transparent
    }

    touch := TouchArea {}

    HorizontalLayout {
        padding-left: 5px;
        padding-right: 5px;
        padding-top: 2px;
        padding-bottom: 2px;
        spacing: 2px;

        HorizontalLayout {
            alignment: start;
            spacing: 6px;
            padding-right: 5px;

            ElidingText {
                text: tx.date;
                min-width: self.preferred-width;
            }
            ElidingText {
                text: tx.time;
                opacity: 0.5;
                font-size: 10px;
                min-width: self.preferred-width;
            }
        }
        TextCell {
            text: tx.tx-type == UiTransactionType.buy ? "Buy" :
                tx.tx-type == UiTransactionType.sell ? "Sell" :
                tx.tx-type == UiTransactionType.trade ? "Trade" :
                tx.tx-type == UiTransactionType.deposit ? "Deposit" :
                tx.tx-type == UiTransactionType.withdrawal ? "Withdrawal" :
                tx.tx-type == UiTransactionType.fee ? "Fee" :
                tx.tx-type == UiTransactionType.receive ? "Receive" :
                tx.tx-type == UiTransactionType.send ? "Send" :
                tx.tx-type == UiTransactionType.transfer ? "Transfer" :
                tx.tx-type == UiTransactionType.chain-split ? "Chain Split" :
                tx.tx-type == UiTransactionType.expense ? "Expense" :
                tx.tx-type == UiTransactionType.income ? "Income" :
                tx.tx-type == UiTransactionType.airdrop ? "Airdrop" :
                tx.tx-type == UiTransactionType.spam ? "Spam" :
                "Unknown";
        }
        Cell {
            horizontal-stretch: 2;
            ElidingText {
                text: tx.sent == "" ? "" : "–\{tx.sent}";
                max-width: self.preferred-width;
            }
            ElidingText {
                text: tx.from;
                font-size: 10px;
                opacity: 0.5;
            }
        }
        Cell {
            horizontal-stretch: 2;
            ElidingText {
                text: tx.received == "" ? "" : "+\{tx.received}";
                max-width: self.preferred-width;
            }
            ElidingText {
                text: tx.to;
                font-size: 10px;
                opacity: 0.5;
            }
        }
        TextCell {
            text: tx.fee;
            font-size: 10px;
            opacity: 0.5;
        }
        TextCell {
            text: tx.value;
            font-size: 10px;
            opacity: 0.5;
        }
        TextCell {
            text: tx.gain-error == "" ? tx.gain : tx.gain_error;
            color: tx.gain < 0 || tx.gain-error != "" ? #ff0000 : tx.gain > 0 ? #00ff00 : transparent;
        }
        HorizontalLayout {
            spacing: 5px;

            tx-btn := SmallButton {
                visible: tx.tx-hash != "";
                text: "#";
                tooltip: tx.tx-hash;

                clicked => { root.open-transaction(tx.tx-hash) }
            }

            desc-btn := SmallButton {
                visible: tx.description != "";
                text: "?";
                tooltip: tx.description;
            }
        }
    }
}

export component Transactions inherits ListView {
    in property <[UiTransaction]> transactions;

    callback open-transaction(string);

    for tx[index] in transactions: TransactionDisplay {
        even: mod(index, 2) == 0;
        tx: tx;
        open-transaction => { root.open-transaction(tx.tx_hash); }
    }
}
