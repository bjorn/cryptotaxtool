import { ListView } from "std-widgets.slint";
import {
    Cell,
    CurrencyIcon,
    DateTimeCell,
    ElidingText,
    TableHeader,
    TextCell,
    HeaderCell,
    MonoTextCell
} from "./common.slint";
import { TestData } from "./test-data.slint";
import { UiTransactionType, UiTransaction } from "./structs.slint";

component SmallButton inherits Rectangle {
    in property text <=> i-text.text;
    in property tooltip <=> i-tooltip.text;
    in property tooltip-font-family <=> i-tooltip.font-family;
    out property <bool> has-hover: i-touch.has-hover;

    callback clicked;

    border-radius: self.height / 4;
    background: i-touch.has-hover ? #5e5e5e : #2e2e2e;
    border-color: i-touch.has-hover ? #6e6e6e : #3e3e3e;
    border-width: 1px;
    preferred-width: i-text.preferred-width + 5px;
    min-width: self.height;
    height: i-text.preferred-height + 5px;

    i-text := Text {
        vertical-alignment: center;
    }
    i-touch := TouchArea {
        clicked => { root.clicked() }
        mouse-cursor: pointer;
    }

    Rectangle {
        background: #000000;
        border-radius: 2px;
        opacity: root.has-hover ? 1.0 : 0;
        width: i-tooltip.preferred-width + 8px;
        height: i-tooltip.preferred-height + 4px;
        x: -(root.has-hover ? 5px : 0) - self.width;
        y: (root.height - self.height) / 2;

        animate opacity, x {
            duration: 100ms;
        }

        i-tooltip := Text {}
    }
}

component TransactionsHeader inherits TableHeader {
    Rectangle {
        height: date-text.preferred-height;

        DateTimeCell {
            visible: false; // only used for alignment purposes
        }

        date-text := HeaderCell {
            text: "Date";
            width: 100%;
        }
    }
    HeaderCell { text: "Action"; }
    HeaderCell { text: "Outgoing"; horizontal-stretch: 2; }
    HeaderCell { text: "Incoming"; horizontal-stretch: 2; }
    HeaderCell { text: "Fee"; horizontal-alignment: right; }
    HeaderCell { text: "Value (€)"; horizontal-alignment: right; }
    HeaderCell { text: "Gain (€)"; horizontal-alignment: right; }
    HorizontalLayout {
        padding-left: parent.width * 0.015;
        height: 0;
        visible: false; // only used for alignment purposes
        spacing: 3px;

        SmallButton { text: "#"; }
        SmallButton { text: "?"; }
    }
}

component TransactionDisplay inherits Rectangle {
    callback open-transaction(string);

    in property <UiTransaction> tx : TestData.transactions[0];
    in property <bool> even;

    property <bool> is-hovered: touch.has-hover || tx-btn.has-hover || desc-btn.has-hover;

    background: is-hovered ? #4564 : even ? #ffffff06 : transparent;
    border-radius: self.height / 4;

    touch := TouchArea {}

    HorizontalLayout {
        padding-left: 5px;
        padding-right: 2px;
        padding-top: 2px;
        padding-bottom: 2px;
        spacing: 2px;

        DateTimeCell {
            date: tx.date;
            time: tx.time;
        }
        TextCell {
            text: tx.tx-type == UiTransactionType.buy ? "Buy" :
                tx.tx-type == UiTransactionType.sell ? "Sell" :
                tx.tx-type == UiTransactionType.trade ? "Trade" :
                tx.tx-type == UiTransactionType.deposit ? "Deposit" :
                tx.tx-type == UiTransactionType.withdrawal ? "Withdrawal" :
                tx.tx-type == UiTransactionType.fee ? "Fee" :
                tx.tx-type == UiTransactionType.receive ? "Receive" :
                tx.tx-type == UiTransactionType.send ? "Send" :
                tx.tx-type == UiTransactionType.transfer ? "Transfer" :
                tx.tx-type == UiTransactionType.chain-split ? "Chain Split" :
                tx.tx-type == UiTransactionType.expense ? "Expense" :
                tx.tx-type == UiTransactionType.income ? "Income" :
                tx.tx-type == UiTransactionType.airdrop ? "Airdrop" :
                tx.tx-type == UiTransactionType.spam ? "Spam" :
                "Unknown";
        }
        Cell {
            horizontal-stretch: 2;
            CurrencyIcon {
                cmc-id: tx.sent-cmc-id;
            }
            ElidingText {
                text: tx.sent == "" ? "" : "-\{tx.sent}";
                max-width: self.preferred-width;
                font-family: "DejaVu Sans Mono";
            }
            ElidingText {
                text: tx.from;
                font-size: 10px;
                opacity: 0.5;
            }
        }
        Cell {
            horizontal-stretch: 2;
            CurrencyIcon {
                cmc-id: tx.received-cmc-id;
            }
            ElidingText {
                text: tx.received == "" ? "" : "+\{tx.received}";
                max-width: self.preferred-width;
                font-family: "DejaVu Sans Mono";
            }
            ElidingText {
                text: tx.to;
                font-size: 10px;
                opacity: 0.5;
            }
        }
        MonoTextCell {
            text: tx.fee;
            font-size: 10px;
            opacity: 0.5;
        }
        MonoTextCell {
            text: tx.value;
            font-size: 10px;
            opacity: 0.5;
        }
        TextCell {
            text: tx.gain-error == "" ? tx.gain : tx.gain_error;
            font-family: tx.gain-error != "" ? "" : "DejaVu Sans Mono";
            color: tx.gain < 0 || tx.gain-error != "" ? #ff0000 : tx.gain > 0 ? #00ff00 : transparent;
            horizontal-alignment: right;
        }
        HorizontalLayout {
            padding-left: parent.width * 0.015;
            spacing: 3px;

            tx-btn := SmallButton {
                visible: tx.tx-hash != "";
                text: "#";
                tooltip: tx.tx-hash;
                tooltip-font-family: "DejaVu Sans Mono";

                clicked => { root.open-transaction(tx.tx-hash) }
            }

            desc-btn := SmallButton {
                visible: tx.description != "";
                text: "?";
                tooltip: tx.description;
            }
        }
    }
}

export component Transactions inherits VerticalLayout {
    in property <[UiTransaction]> transactions: TestData.transactions;

    callback open-transaction(string);

    spacing: 2px;

    TransactionsHeader {}

    ListView {
        for tx[index] in transactions: TransactionDisplay {
            even: mod(index, 2) == 0;
            tx: tx;
            open-transaction => { root.open-transaction(tx.tx_hash); }
        }
    }
}