import { HorizontalBox, CheckBox, ComboBox} from "std-widgets.slint";
import { Sources } from "./sources.slint";
import { Transactions  } from "./transactions.slint";
import { Reports } from "./reports.slint";
import { Badge } from "./common.slint";
import { TestData } from "./test-data.slint";
import { UiCapitalGain, UiTaxReport, UiTransaction, UiTransactionSource } from "./structs.slint";

export { UiCapitalGain }

enum Page {
    sources,
    transactions,
    reports,
}

component PageButton inherits Rectangle {
    in-out property text <=> txt.text;
    in property <bool> active;

    callback pressed;

    border-radius: self.height / 4;
    border-color: (touch.has-hover || root.active) ? #456 : #3e3e3e;
    border-width: 1px;
    background: root.active ? #456 : transparent;
    height: layout.preferred-height * 1.33;
    width: layout.preferred-width + 20px;

    layout := HorizontalLayout {
        spacing: 10px;
        alignment: center;
        txt := Text {
            font-size: 14px;
            vertical-alignment: center;
        }

        @children
    }
    touch := TouchArea {
        pointer-event(event) => {
            if (event.kind == PointerEventKind.down) {
                root.pressed();
            }
        }
    }
}

export component AppWindow inherits Window {
    in property <[UiTransactionSource]> sources: TestData.sources;
    in property <[string]> source_types;
    in property <[UiTransaction]> transactions: TestData.transactions;
    in property <[[StandardListViewItem]]> gain-entries;
    in property <[StandardListViewItem]> report-years: TestData.report-years;
    in property <[UiTaxReport]> reports: TestData.reports;

    callback open-transaction(string);

    property <Page> active-page: Page.transactions;

    title: "Crypto Tax Tool";

    min-width: 512px;
    min-height: 160px;
    preferred-width: 1200px;
    preferred-height: 640px;

    VerticalLayout {
        HorizontalBox {
            alignment: center;

            PageButton {
                text: "Sources";
                active: root.active-page == Page.sources;
                pressed => { root.active-page = Page.sources; }

                Badge {
                    text: root.sources.length;
                }
            }
            PageButton {
                text: "Transactions";
                active: root.active-page == Page.transactions;
                pressed => { root.active-page = Page.transactions; }

                Badge {
                    text: root.transactions.length;
                }
            }
            PageButton {
                text: "Reports";
                active: root.active-page == Page.reports;
                pressed => { root.active-page = Page.reports; }

                Badge {
                    text: root.reports.length;
                }
            }
        }

        Rectangle {
            Sources {
                visible: active-page == Page.sources;
                sources: root.sources;
            }

            Transactions {
                visible: active-page == Page.transactions;
                transactions: root.transactions;
                open-transaction(s) => { root.open-transaction(s); }
            }

            Reports {
                visible: active-page == Page.reports;
                report-years: root.report-years;
                reports: root.reports;
            }
        }
    }
}
