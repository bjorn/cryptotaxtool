import { StandardTableView, TabWidget, ListView, HorizontalBox, CheckBox, ComboBox} from "std-widgets.slint";

export enum UiTransactionType {
    buy,
    sell,
    trade,
    deposit,
    withdrawal,
    fee,
    receive,
    send,
    chain-split,
    expense,
    income,
    airdrop,
    spam,
}

export struct UiTransactionSource {
    source_type: string,
    name: string,
    path: string,
    transaction_count: int,
}

export struct UiTransaction {
    source: string,
    date: string,
    time: string,
    tx_type: UiTransactionType,
    received: string,
    sent: string,
    fee: string,
    value: string,
    gain: float,
    gain_error: string,
    description: string,
    tx_hash: string,
}

// Unused by Slint for now, but might be a better way of exposing data to UI
export struct UiCapitalGain {
    currency: string,
    bought: string,
    sold: string,
    quantity: float,
    cost: float,
    proceeds: float,
    gain_or_loss: float,
    long_term: bool,
}

component TextCell inherits Text {
    horizontal-stretch: 1;
    preferred-width: 0;
    min-width: 0;
    overflow: elide;
    vertical-alignment: center;
}

enum Page {
    sources,
    transactions,
    capital-gains,
}

component Badge inherits VerticalLayout {
    in-out property text <=> txt.text;
    alignment: center;

    Rectangle {
        vertical-stretch: 0;
        horizontal-stretch: 0;

        background: #434343;
        border-radius: self.height / 2;
        height: txt.preferred-height + 2px;
        width: txt.preferred-width + 12px;

        txt := Text {
            text: 123;
            color: white;
            font-size: 10px;
        }
    }
}

component PageButton inherits Rectangle {
    in-out property text <=> txt.text;
    in property <bool> active;

    callback pressed;

    border-radius: root.height / 4;
    background: root.active ? #456 : transparent;
    height: layout.preferred-height * 1.33;
    width: layout.preferred-width + 20px;

    layout := HorizontalLayout {
        spacing: 10px;
        alignment: center;
        txt := Text {
            font-size: 14px;
            vertical-alignment: center;
        }

        @children
    }
    touch := TouchArea {
        pointer-event(event) => {
            if (event.kind == PointerEventKind.down) {
                root.pressed();
            }
        }
    }
}

component TransactionDisplay inherits Rectangle {
    callback open-transaction(string);

    in property <UiTransaction> tx : {
        source: "Foo Wallet",
        date: "2013-11-01",
        time: "12:34:56",
        tx_type: UiTransactionType.buy,
        received: "1 BTC",
        sent: "300 €",
        fee: "1 €",
        value: "300 €",
        gain: 0.0,
        gain_error: "",
        description: "Foo bar baz",
        tx_hash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    };

    in property <bool> even;

    background: even ? #ffffff06 : transparent;

    HorizontalLayout {
        padding-top: 2px;
        padding-bottom: 2px;
        HorizontalLayout {
            alignment: start;
            spacing: 6px;
            padding-left: 10px;
            padding-right: 12px;
            Text {
                text: tx.date;
                overflow: elide;
                min-width: self.preferred-width;
                vertical-alignment: center;
            }
            Text {
                text: tx.time;
                opacity: 0.5;
                overflow: elide;
                min-width: self.preferred-width;
                vertical-alignment: center;
            }
        }
        TextCell {
            text: tx.tx-type == UiTransactionType.buy ? "Buy" :
                tx.tx-type == UiTransactionType.sell ? "Sell" :
                tx.tx-type == UiTransactionType.trade ? "Trade" :
                tx.tx-type == UiTransactionType.deposit ? "Deposit" :
                tx.tx-type == UiTransactionType.withdrawal ? "Withdrawal" :
                tx.tx-type == UiTransactionType.fee ? "Fee" :
                tx.tx-type == UiTransactionType.receive ? "Receive" :
                tx.tx-type == UiTransactionType.send ? "Send" :
                tx.tx-type == UiTransactionType.chain-split ? "Chain Split" :
                tx.tx-type == UiTransactionType.expense ? "Expense" :
                tx.tx-type == UiTransactionType.income ? "Income" :
                tx.tx-type == UiTransactionType.airdrop ? "Airdrop" :
                tx.tx-type == UiTransactionType.spam ? "Spam" :
                "Unknown";
        }
        TextCell {
            text: tx.source;
            font-size: 10px;
            opacity: 0.5;
        }
        TextCell {
            text: tx.sent == "" ? "" : "–\{tx.sent}";
        }
        TextCell {
            text: tx.received == "" ? "" : "+\{tx.received}";
        }
        TextCell {
            text: tx.fee;
            font-size: 10px;
            opacity: 0.5;
        }
        TextCell {
            text: tx.value;
            font-size: 10px;
            opacity: 0.5;
        }
        TextCell {
            text: tx.gain-error == "" ? tx.gain : tx.gain_error;
            color: tx.gain < 0 || tx.gain-error != "" ? #ff0000 : tx.gain > 0 ? #00ff00 : transparent;
        }
        VerticalLayout {
            alignment: center;
            padding-right: 10px;

            tx-btn-rect := Rectangle {
                border-radius: 2px;
                background: tx-btn-touch.has-hover ? #5e5e5e : #2e2e2e;
                visible: tx.tx-hash != "";
                width: hash.preferred-width + 5px;
                height: hash.preferred-height + 5px;

                hash := Text {
                    text: "#";
                    vertical-alignment: center;
                }
                tx-btn-touch := TouchArea {
                    clicked => {
                        root.open-transaction(tx.tx-hash);
                    }
                    mouse-cursor: pointer;
                }

                Rectangle {
                    background: #000000;
                    border-radius: 2px;
                    opacity: tx-btn-touch.has-hover ? 1.0 : 0;
                    width: hash-text.preferred-width + 8px;
                    height: hash-text.preferred-height + 4px;
                    x: -(tx-btn-touch.has-hover ? 5px : 0) - self.width;
                    y: (tx-btn-rect.height - self.height) / 2;

                    animate opacity, x {
                        duration: 100ms;
                    }

                    hash-text := Text {
                        text: tx.tx-hash;
                    }
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    in property <[UiTransactionSource]> sources;
    in property <[string]> source_types;
    in property <[UiTransaction]> transactions;
    in property <[[StandardListViewItem]]> gain_entries;

    callback open-transaction(string);

    property <Page> active-page: Page.sources;

    title: "Crypto Tax Tool";

    min-width: 512px;
    min-height: 160px;
    preferred-width: 1200px;
    preferred-height: 640px;

    VerticalLayout {
        HorizontalBox {
            alignment: center;

            PageButton {
                text: "Sources";
                active: root.active-page == Page.sources;
                pressed => { root.active-page = Page.sources; }

                Badge {
                    text: root.sources.length;
                }
            }
            PageButton {
                text: "Transactions";
                active: root.active-page == Page.transactions;
                pressed => { root.active-page = Page.transactions; }

                Badge {
                    text: root.transactions.length;
                }
            }
            PageButton {
                text: "Capital Gains";
                active: root.active-page == Page.capital-gains;
                pressed => { root.active-page = Page.capital-gains; }

                Badge {
                    text: root.gain_entries.length;
                }
            }
        }

        if (active-page == Page.sources): ListView {
            for source in sources: HorizontalBox {
                CheckBox {
                    checked: true;
                    text: source.name;
                    enabled: false;
                }
                Text {
                    text: source.path;
                    vertical-alignment: center;
                }
                Text {
                    text: "(\{source.transaction-count} transactions)";
                    horizontal-stretch: 1;
                    vertical-alignment: center;
                    opacity: 0.5;
                }
                ComboBox {
                    model: source_types;
                    horizontal-stretch: 0;
                    current-value: source.source_type;
                    enabled: false;
                }
            }
        }

        if (active-page == Page.transactions): ListView {
            for tx[index] in transactions: TransactionDisplay {
                even: mod(index, 2) == 0;
                tx: tx;
                open-transaction => { root.open-transaction(tx.tx_hash); }
            }
        }

        if (active-page == Page.capital-gains): StandardTableView {
            width: 100%;
            height: 100%;

            columns: [
                { title: "Currency" },
                { title: "Bought" },
                { title: "Sold" },
                { title: "Quantity" },
                { title: "Cost" },
                { title: "Proceeds" },
                { title: "Gain or Loss" },
                { title: "Long Term" },
            ];
            rows: gain_entries;
        }
    }
}
